{
  "hash": "5ad40ce3baca522ea2d5bac716d2471b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chapter 2\\nTime Series Graphics\"\nformat: \n  revealjs:\n    output-file: \"2-ts-graphics.html\"\n  html:\n    output-file: \"2-ts-graphics_o.html\"\nlogo: \"../img/favicon.png\"\n---\n\n\n\n\n## Setup \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\nlibrary(fpp3)\nlibrary(tidyverse)\n\nglobal_economy <- global_economy |>\n  select(Year, Country, GDP, Imports, Exports, Population)\n\ntourism <- tourism |>\n  mutate(\n    State = recode(State,\n      \"Australian Capital Territory\" = \"ACT\",\n      \"New South Wales\" = \"NSW\",\n      \"Northern Territory\" = \"NT\",\n      \"Queensland\" = \"QLD\",\n      \"South Australia\" = \"SA\",\n      \"Tasmania\" = \"TAS\",\n      \"Victoria\" = \"VIC\",\n      \"Western Australia\" = \"WA\"\n    )\n  )\n```\n:::\n\n\n\n\n# Time series in R\n\n## `tsibble` objects\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_economy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 15,150 x 6 [1Y]\n# Key:       Country [263]\n    Year Country             GDP Imports Exports Population\n   <dbl> <fct>             <dbl>   <dbl>   <dbl>      <dbl>\n 1  1960 Afghanistan  537777811.    7.02    4.13    8996351\n 2  1961 Afghanistan  548888896.    8.10    4.45    9166764\n 3  1962 Afghanistan  546666678.    9.35    4.88    9345868\n 4  1963 Afghanistan  751111191.   16.9     9.17    9533954\n 5  1964 Afghanistan  800000044.   18.1     8.89    9731361\n 6  1965 Afghanistan 1006666638.   21.4    11.3     9938414\n 7  1966 Afghanistan 1399999967.   18.6     8.57   10152331\n 8  1967 Afghanistan 1673333418.   14.2     6.77   10372630\n 9  1968 Afghanistan 1373333367.   15.2     8.90   10604346\n10  1969 Afghanistan 1408888922.   15.0    10.1    10854428\n# ℹ 15,140 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## `tsibble` objects\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism |> head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 5 x 5 [1Q]\n# Key:       Region, State, Purpose [1]\n  Quarter Region   State Purpose  Trips\n    <qtr> <chr>    <chr> <chr>    <dbl>\n1 1998 Q1 Adelaide SA    Business  135.\n2 1998 Q2 Adelaide SA    Business  110.\n3 1998 Q3 Adelaide SA    Business  166.\n4 1998 Q4 Adelaide SA    Business  127.\n5 1999 Q1 Adelaide SA    Business  137.\n```\n\n\n:::\n:::\n\n\n\n\n. . .\n\nDomestic visitor nights in thousands by state/region and purpose.\n\n## `tsibble` objects\n\n* A `tsibble` allows storage and manipulation of multiple time series in R.\n\n* It contains:\n\n  + An index: time information about the observation\n  + Measured variable(s): numbers of interest\n  + Key variable(s): optional unique identifiers for each series\n\n* It works with tidyverse functions.\n\n## The `tsibble` index\n\n### Example\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- tsibble(\n    year = 2012:2016,\n    y = c(123, 39, 78, 52, 110),\n    index = year\n)\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 5 x 2 [1Y]\n   year     y\n  <int> <dbl>\n1  2012   123\n2  2013    39\n3  2014    78\n4  2015    52\n5  2016   110\n```\n\n\n:::\n:::\n\n\n\n\n## The `tsibble` index\n\n### Example\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- tibble(\n    year = 2012:2016,\n    y = c(123, 39, 78, 52, 110)\n  ) |>\n  as_tsibble(index = year)\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 5 x 2 [1Y]\n   year     y\n  <int> <dbl>\n1  2012   123\n2  2013    39\n3  2014    78\n4  2015    52\n5  2016   110\n```\n\n\n:::\n:::\n\n\n\n\n## The `tsibble` index\n\n*For observations more frequent than once per year, we need to use a time class function on the index.*\n\n. . .\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  Month    Observation\n  <chr>          <dbl>\n1 2019 Jan          50\n2 2019 Feb          23\n3 2019 Mar          34\n4 2019 Apr          30\n5 2019 May          25\n```\n\n\n:::\n:::\n\n\n\n\n## The `tsibble` index\n\nFor observations more frequent than once per year, we need to use a time class function on the index.\n\n. . .\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz |>\n  mutate(Month = yearmonth(Month)) |>\n  as_tsibble(index = Month)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 5 x 2 [1M]\n     Month Observation\n     <mth>       <dbl>\n1 2019 Jan          50\n2 2019 Feb          23\n3 2019 Mar          34\n4 2019 Apr          30\n5 2019 May          25\n```\n\n\n:::\n:::\n\n\n\n\n## The `tsibble` index\n\nCommon time index variables can be created with these functions:\n\n. . .\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Frequency |Function             |\n|:---------|:--------------------|\n|Annual    |`start:end`          |\n|Quarterly |`yearquarter()`      |\n|Monthly   |`yearmonth()`        |\n|Weekly    |`yearweek()`         |\n|Daily     |`as_date()`, `ymd()` |\n|Sub-daily |`as_datetime()`      |\n\n\n:::\n:::\n\n\n\n\n# Example: Australian prison population\n\n## Australian prison population\n\n![](figs/Beechworth_prison.jpg)\n\n## Read a csv file and convert to a tsibble {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprison <- readr::read_csv(\"data/prison_population.csv\")\n#readr::read_csv(\"~/STA364/data/prison_population.csv\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,072 × 6\n   date       state gender legal     indigenous count\n   <date>     <chr> <chr>  <chr>     <chr>      <dbl>\n 1 2005-03-01 ACT   Female Remanded  ATSI           0\n 2 2005-03-01 ACT   Female Remanded  Other          2\n 3 2005-03-01 ACT   Female Sentenced ATSI           0\n 4 2005-03-01 ACT   Female Sentenced Other          0\n 5 2005-03-01 ACT   Male   Remanded  ATSI           7\n 6 2005-03-01 ACT   Male   Remanded  Other         58\n 7 2005-03-01 ACT   Male   Sentenced ATSI           0\n 8 2005-03-01 ACT   Male   Sentenced Other          0\n 9 2005-03-01 NSW   Female Remanded  ATSI          51\n10 2005-03-01 NSW   Female Remanded  Other        131\n# ℹ 3,062 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Read a csv file and convert to a tsibble {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprison <- readr::read_csv(\"data/prison_population.csv\") |>\n  mutate(Quarter = yearquarter(date))\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,072 × 7\n   date       state gender legal     indigenous count Quarter\n   <date>     <chr> <chr>  <chr>     <chr>      <dbl>   <qtr>\n 1 2005-03-01 ACT   Female Remanded  ATSI           0 2005 Q1\n 2 2005-03-01 ACT   Female Remanded  Other          2 2005 Q1\n 3 2005-03-01 ACT   Female Sentenced ATSI           0 2005 Q1\n 4 2005-03-01 ACT   Female Sentenced Other          0 2005 Q1\n 5 2005-03-01 ACT   Male   Remanded  ATSI           7 2005 Q1\n 6 2005-03-01 ACT   Male   Remanded  Other         58 2005 Q1\n 7 2005-03-01 ACT   Male   Sentenced ATSI           0 2005 Q1\n 8 2005-03-01 ACT   Male   Sentenced Other          0 2005 Q1\n 9 2005-03-01 NSW   Female Remanded  ATSI          51 2005 Q1\n10 2005-03-01 NSW   Female Remanded  Other        131 2005 Q1\n# ℹ 3,062 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Read a csv file and convert to a tsibble {-}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprison <- readr::read_csv(\"data/prison_population.csv\") |>\n  mutate(Quarter = yearquarter(date)) |>\n  select(-date)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,072 × 6\n   state gender legal     indigenous count Quarter\n   <chr> <chr>  <chr>     <chr>      <dbl>   <qtr>\n 1 ACT   Female Remanded  ATSI           0 2005 Q1\n 2 ACT   Female Remanded  Other          2 2005 Q1\n 3 ACT   Female Sentenced ATSI           0 2005 Q1\n 4 ACT   Female Sentenced Other          0 2005 Q1\n 5 ACT   Male   Remanded  ATSI           7 2005 Q1\n 6 ACT   Male   Remanded  Other         58 2005 Q1\n 7 ACT   Male   Sentenced ATSI           0 2005 Q1\n 8 ACT   Male   Sentenced Other          0 2005 Q1\n 9 NSW   Female Remanded  ATSI          51 2005 Q1\n10 NSW   Female Remanded  Other        131 2005 Q1\n# ℹ 3,062 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Read a csv file and convert to a tsibble {-}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprison <- readr::read_csv(\"data/prison_population.csv\") |>\n  mutate(Quarter = yearquarter(date)) |>\n  select(-date) |>\n  as_tsibble(\n    index = Quarter,\n    key = c(state, gender, legal, indigenous)\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 5 x 6 [1Q]\n# Key:       state, gender, legal, indigenous [1]\n  state gender legal    indigenous count Quarter\n  <chr> <chr>  <chr>    <chr>      <dbl>   <qtr>\n1 ACT   Female Remanded ATSI           0 2005 Q1\n2 ACT   Female Remanded ATSI           1 2005 Q2\n3 ACT   Female Remanded ATSI           0 2005 Q3\n4 ACT   Female Remanded ATSI           0 2005 Q4\n5 ACT   Female Remanded ATSI           1 2006 Q1\n```\n\n\n:::\n:::\n\n\n\n\n# Example: Australian pharmaceutical sales\n\n## Australian Pharmaceutical Benefits Scheme\n\n![](figs/pills.jpg)\n\n## Australian Pharmaceutical Benefits Scheme {.smaller}\n\nThe *Pharmaceutical Benefits Scheme* (PBS) is the Australian government drugs subsidy scheme.\n\n  * Many drugs bought from pharmacies are subsidised to allow more equitable access to modern drugs.\n  * The cost to government is determined by the number and types of drugs purchased. Currently nearly 1\\% of GDP.\n  * The total cost is budgeted based on forecasts of drug usage.\n  * Costs are disaggregated by drug type (ATC1 x15 / ATC2 84), concession category (x2) and patient type (x2), giving $84\\times2\\times2=336$ time series.\n\n## Working with `tsibble` objects\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPBS |> head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 5 x 9 [1M]\n# Key:       Concession, Type, ATC1, ATC2 [1]\n     Month Concession   Type        ATC1  ATC1_desc          ATC2  ATC2_desc Scripts  Cost\n     <mth> <chr>        <chr>       <chr> <chr>              <chr> <chr>       <dbl> <dbl>\n1 1991 Jul Concessional Co-payments A     Alimentary tract … A01   STOMATOL…   18228 67877\n2 1991 Aug Concessional Co-payments A     Alimentary tract … A01   STOMATOL…   15327 57011\n3 1991 Sep Concessional Co-payments A     Alimentary tract … A01   STOMATOL…   14775 55020\n4 1991 Oct Concessional Co-payments A     Alimentary tract … A01   STOMATOL…   15380 57222\n5 1991 Nov Concessional Co-payments A     Alimentary tract … A01   STOMATOL…   14371 52120\n```\n\n\n:::\n:::\n\n\n\n\n## Working with `tsibble` objects\n\n\nWe can use the `filter()` function to select rows.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPBS |>\n  filter(ATC2 == \"A10\")|> \n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 5 x 9 [1M]\n# Key:       Concession, Type, ATC1, ATC2 [1]\n     Month Concession   Type        ATC1  ATC1_desc         ATC2  ATC2_desc Scripts   Cost\n     <mth> <chr>        <chr>       <chr> <chr>             <chr> <chr>       <dbl>  <dbl>\n1 1991 Jul Concessional Co-payments A     Alimentary tract… A10   ANTIDIAB…   89733 2.09e6\n2 1991 Aug Concessional Co-payments A     Alimentary tract… A10   ANTIDIAB…   77101 1.80e6\n3 1991 Sep Concessional Co-payments A     Alimentary tract… A10   ANTIDIAB…   76255 1.78e6\n4 1991 Oct Concessional Co-payments A     Alimentary tract… A10   ANTIDIAB…   78681 1.85e6\n5 1991 Nov Concessional Co-payments A     Alimentary tract… A10   ANTIDIAB…   70554 1.69e6\n```\n\n\n:::\n:::\n\n\n\n\n## Working with `tsibble` objects {-}\n\n\nWe can use the `select()` function to select columns.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPBS |>\n  filter(ATC2 == \"A10\") |>\n  select(Month, Concession, Type, Cost)|> \n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 5 x 4 [1M]\n# Key:       Concession, Type [1]\n     Month Concession   Type           Cost\n     <mth> <chr>        <chr>         <dbl>\n1 1991 Jul Concessional Co-payments 2092878\n2 1991 Aug Concessional Co-payments 1795733\n3 1991 Sep Concessional Co-payments 1777231\n4 1991 Oct Concessional Co-payments 1848507\n5 1991 Nov Concessional Co-payments 1686458\n```\n\n\n:::\n:::\n\n\n\n\n## Working with `tsibble` objects {-}\n\n\nWe can use the `summarise()` function to summarise over keys.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPBS |>\n  filter(ATC2 == \"A10\") |>\n  select(Month, Concession, Type, Cost) |>\n  summarise(total_cost = sum(Cost))|> \n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 5 x 2 [1M]\n     Month total_cost\n     <mth>      <dbl>\n1 1991 Jul    3526591\n2 1991 Aug    3180891\n3 1991 Sep    3252221\n4 1991 Oct    3611003\n5 1991 Nov    3565869\n```\n\n\n:::\n:::\n\n\n\n\n## Working with `tsibble` objects {-}\n\n\nWe can use the `mutate()` function to create new variables.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPBS |>\n  filter(ATC2 == \"A10\") |>\n  select(Month, Concession, Type, Cost) |>\n  summarise(total_cost = sum(Cost)) |>\n  mutate(total_cost = total_cost / 1e6)|> \n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 5 x 2 [1M]\n     Month total_cost\n     <mth>      <dbl>\n1 1991 Jul       3.53\n2 1991 Aug       3.18\n3 1991 Sep       3.25\n4 1991 Oct       3.61\n5 1991 Nov       3.57\n```\n\n\n:::\n:::\n\n\n\n\n## Working with `tsibble` objects {-}\n\n\nWe can use the `mutate()` function to create new variables.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na10 <- PBS |>\n  filter(ATC2 == \"A10\") |>\n  select(Month, Concession, Type, Cost) |>\n  summarise(total_cost = sum(Cost)) |>\n  mutate(total_cost = total_cost / 1e6) |> \n  head(5)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 5 x 2 [1M]\n     Month total_cost\n     <mth>      <dbl>\n1 1991 Jul       3.53\n2 1991 Aug       3.18\n3 1991 Sep       3.25\n4 1991 Oct       3.61\n5 1991 Nov       3.57\n```\n\n\n:::\n:::\n\n\n\n\n\n\n# Time plots\n\n## Time plots\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na10 |>\n  autoplot(total_cost)\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n\n\n## Ansett airlines\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nansett |>\n  autoplot(Passengers)\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n\n\n## Ansett airlines\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nansett |>\n  filter(Class == \"Economy\") |>\n  autoplot(Passengers)\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n\n\n## Ansett airlines\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nansett |>\n  filter(Airports == \"MEL-SYD\") |>\n  autoplot(Passengers)\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\n\n## Time series patterns\n\nTrend\n  : pattern exists when there is a long-term increase or decrease in the data.\n\nSeasonal\n  : pattern exists when a series is influenced by seasonal factors (e.g., the quarter of the year, the month, or day of the week).\n\nCyclic\n  : pattern exists when data exhibit rises and falls that are \\emph{not of fixed period} (duration usually of at least 2 years).\n\n## Time series components\n\n### Differences between seasonal and cyclic patterns:\n\n* seasonal pattern constant length; cyclic pattern variable length\n* average length of cycle longer than length of seasonal pattern\n* magnitude of cycle more variable than magnitude of seasonal pattern\n\n## Time series patterns\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naus_production |>\n  filter(year(Quarter) >= 1980) |>\n  autoplot(Electricity) +\n  labs(y = \"GWh\", title = \"Australian electricity production\")\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n\n\n## Time series patterns\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naus_production |>\n  autoplot(Bricks) +\n  labs(y = \"million units\", title = \"Australian clay brick production\")\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n\n\n## Time series patterns\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_employment |>\n  filter(Title == \"Retail Trade\", year(Month) >= 1980) |>\n  autoplot(Employed / 1e3) +\n  labs(y = \"Million people\", title = \"Retail employment, USA\")\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n\n\n## Time series patterns\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngafa_stock |>\n  filter(Symbol == \"AMZN\", year(Date) >= 2018) |>\n  autoplot(Close) +\n  labs(y = \"$US\", title = \"Amazon closing stock price\")\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n\n\n## Time series patterns\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npelt |>\n  autoplot(Lynx) +\n  labs(y=\"Number trapped\", title = \"Annual Canadian Lynx Trappings\")\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n\n\n## Seasonal or cyclic?\n\n\\alert{Differences between seasonal and cyclic patterns:}\n\n  * seasonal pattern constant length; cyclic pattern variable length\n  * average length of cycle longer than length of seasonal pattern\n  * magnitude of cycle more variable than magnitude of seasonal pattern\n\n\\pause\n\n\\begin{alertblock}{}\nThe timing of peaks and troughs is predictable with seasonal data, but unpredictable in the long term with cyclic data.\n\\end{alertblock}\n\n# Seasonal and subseries plots\n\n## Seasonal plots\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na10 |> gg_season(total_cost, labels = \"both\") +\n  labs(y = \"$ million\", title = \"Seasonal plot: antidiabetic drug sales\")\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n\n\n## Seasonal plots\n\n  * Data plotted against the individual \"seasons\" in which the data were observed.  (In this case a \"season\" is a month.)\n  * Something like a time plot except that the data from each season are overlapped.\n  * Enables the underlying seasonal pattern to be seen more clearly, and also allows any substantial departures from the seasonal pattern to be easily identified.\n  * In R: `gg_season()`\n\n## Seasonal subseries plots\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na10 |>\n  gg_subseries(total_cost) +\n  labs(y = \"$ million\", title = \"Subseries plot: antidiabetic drug sales\")\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n\n\n## Seasonal subseries plots\n\n  * Data for each season collected together in time plot as separate time series.\n  * Enables the underlying seasonal pattern to be seen clearly, and changes in seasonality over time to be visualized.\n  * In R: `gg_subseries()`\n\n## Quarterly Australian Beer Production\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeer <- aus_production |>\n  select(Quarter, Beer) |>\n  filter(year(Quarter) >= 1992)\nbeer |> autoplot(Beer)\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n\n\n## Quarterly Australian Beer Production\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeer |> gg_season(Beer, labels=\"right\")\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n\n\n## Quarterly Australian Beer Production\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeer |> gg_subseries(Beer)\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n\n\n## Multiple seasonal periods\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvic_elec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 52,608 x 5 [30m] <Australia/Melbourne>\n   Time                Demand Temperature Date       Holiday\n   <dttm>               <dbl>       <dbl> <date>     <lgl>  \n 1 2012-01-01 00:00:00  4383.        21.4 2012-01-01 TRUE   \n 2 2012-01-01 00:30:00  4263.        21.0 2012-01-01 TRUE   \n 3 2012-01-01 01:00:00  4049.        20.7 2012-01-01 TRUE   \n 4 2012-01-01 01:30:00  3878.        20.6 2012-01-01 TRUE   \n 5 2012-01-01 02:00:00  4036.        20.4 2012-01-01 TRUE   \n 6 2012-01-01 02:30:00  3866.        20.2 2012-01-01 TRUE   \n 7 2012-01-01 03:00:00  3694.        20.1 2012-01-01 TRUE   \n 8 2012-01-01 03:30:00  3562.        19.6 2012-01-01 TRUE   \n 9 2012-01-01 04:00:00  3433.        19.1 2012-01-01 TRUE   \n10 2012-01-01 04:30:00  3359.        19.0 2012-01-01 TRUE   \n# ℹ 52,598 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Multiple seasonal periods\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvic_elec |> gg_season(Demand)\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-18-1.png){width=1800}\n:::\n:::\n\n\n\n\n## Multiple seasonal periods\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvic_elec |> gg_season(Demand, period = \"week\")\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-19-1.png){width=1800}\n:::\n:::\n\n\n\n\n## Multiple seasonal periods\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvic_elec |> gg_season(Demand, period = \"day\")\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-20-1.png){width=1800}\n:::\n:::\n\n\n\n\n## Australian holidays\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nholidays <- tourism |>\n  filter(Purpose == \"Holiday\") |>\n  group_by(State) |>\n  summarise(Trips = sum(Trips))\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 640 x 3 [1Q]\n# Key:       State [8]\n   State Quarter Trips\n   <chr>   <qtr> <dbl>\n 1 ACT   1998 Q1  196.\n 2 ACT   1998 Q2  127.\n 3 ACT   1998 Q3  111.\n 4 ACT   1998 Q4  170.\n 5 ACT   1999 Q1  108.\n 6 ACT   1999 Q2  125.\n 7 ACT   1999 Q3  178.\n 8 ACT   1999 Q4  218.\n 9 ACT   2000 Q1  158.\n10 ACT   2000 Q2  155.\n# ℹ 630 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Australian holidays\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nholidays |> autoplot(Trips) +\n  labs(y = \"thousands of trips\", title = \"Australian domestic holiday nights\")\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/holidays-plot-1.png){width=960}\n:::\n:::\n\n\n\n\n## Seasonal plots\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nholidays |> gg_season(Trips) +\n  labs(y = \"thousands of trips\", title = \"Australian domestic holiday nights\")\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/graphics1-1.png){width=960}\n:::\n:::\n\n\n\n\n## Seasonal subseries plots\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nholidays |>\n  gg_subseries(Trips) +\n  labs(y = \"thousands of trips\", title = \"Australian domestic holiday nights\")\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/graphics2-1.png){width=960}\n:::\n:::\n\n\n\n\n# Lag plots and autocorrelation\n\n## Example: Beer production\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_production <- aus_production |>\n  filter(year(Quarter) >= 1992)\nnew_production\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 74 x 7 [1Q]\n   Quarter  Beer Tobacco Bricks Cement Electricity   Gas\n     <qtr> <dbl>   <dbl>  <dbl>  <dbl>       <dbl> <dbl>\n 1 1992 Q1   443    5777    383   1289       38332   117\n 2 1992 Q2   410    5853    404   1501       39774   151\n 3 1992 Q3   420    6416    446   1539       42246   175\n 4 1992 Q4   532    5825    420   1568       38498   129\n 5 1993 Q1   433    5724    394   1450       39460   116\n 6 1993 Q2   421    6036    462   1668       41356   149\n 7 1993 Q3   410    6570    475   1648       42949   163\n 8 1993 Q4   512    5675    443   1863       40974   138\n 9 1994 Q1   449    5311    421   1468       40162   127\n10 1994 Q2   381    5717    475   1755       41199   159\n# ℹ 64 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Example: Beer production\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_production |> gg_lag(Beer)\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\n\n\n## Example: Beer production\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_production |> gg_lag(Beer, geom='point')\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-24-1.png){width=960}\n:::\n:::\n\n\n\n\n## Lagged scatterplots\n\n  * Each graph shows $y_t$ plotted against $y_{t-k}$ for\ndifferent values of $k$.\n  * The autocorrelations are the correlations associated\nwith these scatterplots.\n  * ACF (autocorrelation function):\n     * $r_1=\\text{Correlation}(y_{t}, y_{t-1})$\n     * $r_2=\\text{Correlation}(y_{t}, y_{t-2})$\n     * $r_3=\\text{Correlation}(y_{t}, y_{t-3})$\n     * etc.\n\n## Autocorrelation\n\n**Covariance** and **correlation**: measure extent of **linear relationship** between two variables ($y$ and $X$).\\pause\n\n**Autocovariance** and **autocorrelation**: measure linear relationship between **lagged values** of a time series $y$.\\pause\n\nWe measure the relationship between:\n\n  * $y_{t}$ and $y_{t-1}$\n  * $y_{t}$ and $y_{t-2}$\n  * $y_{t}$ and $y_{t-3}$\n  * etc.\n\n## Autocorrelation\n\nWe denote the sample autocovariance at lag $k$ by $c_k$ and the sample autocorrelation at lag $k$ by $r_k$.  Then define\n\n\\begin{block}{}\n\\begin{align*}\nc_k &= \\frac{1}{T}\\sum_{t=k+1}^T (y_t-\\bar{y})(y_{t-k}-\\bar{y}) \\\\[0.cm]\n\\text{and}\\qquad\nr_{k} &= c_k/c_0\n\\end{align*}\n\\end{block}\\pause\\small\n\n  * $r_1$ indicates how successive values of  $y$  relate to each other\n  * $r_2$ indicates how  $y$ values two periods apart relate to each other\n  * $r_k$ is \\textit{almost} the same as the sample correlation between $y_t$ and $y_{t-k}$.\n\n## Autocorrelation\n\nResults for first 9 lags for beer data:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_production |> ACF(Beer, lag_max = 9)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 9 x 2 [1Q]\n       lag     acf\n  <cf_lag>   <dbl>\n1       1Q -0.102 \n2       2Q -0.657 \n3       3Q -0.0603\n4       4Q  0.869 \n5       5Q -0.0892\n6       6Q -0.635 \n7       7Q -0.0542\n8       8Q  0.832 \n9       9Q -0.108 \n```\n\n\n:::\n:::\n\n\n\n\n## Autocorrelation\n\nResults for first 9 lags for beer data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_production |> ACF(Beer, lag_max = 9) |> autoplot()\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/beeracf-1.png){width=960}\n:::\n:::\n\n\n\n\n  * Together, the autocorrelations at lags 1, 2, \\dots, make up the \\emph{autocorrelation} or ACF.\n  * The plot is known as a **correlogram**\n\n\n\n## Autocorrelation {.smaller}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_production |> ACF(Beer) |> autoplot()\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/beeracf2-1.png){width=960}\n:::\n:::\n\n\n\n\n  * $r_{4}$  higher than for the other lags. This is due to **the seasonal pattern in the data**: the peaks tend to be **4 quarters** apart and the troughs tend to be **2 quarters** apart.\n  * $r_2$ is more negative than for the other lags because troughs tend to be 2 quarters behind peaks.\n\n## Trend and seasonality in ACF plots\n\n- When data have a trend, the autocorrelations for small lags tend to be large and positive.\n- When data are seasonal, the autocorrelations will be larger at the seasonal lags (i.e., at multiples of the seasonal frequency)\n- When data are trended and seasonal, you see a combination of these effects.\n\n## Autocorrelation functions\n\n\n\n\n\n\n\n\n\n\n![](figs/animated_acf.gif)\n\n\n:::aside\nArtwork by @allison\\_horst\n:::\n\n## US retail trade employment\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nretail <- us_employment |>\n  filter(Title == \"Retail Trade\", year(Month) >= 1980)\nretail |> autoplot(Employed)\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-27-1.png){width=960}\n:::\n:::\n\n\n\n\n## US retail trade employment\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nretail |>\n  ACF(Employed, lag_max = 48) |>\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-28-1.png){width=960}\n:::\n:::\n\n\n\n\n## Google stock price\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngoogle_2015 <- gafa_stock |>\n  filter(Symbol == \"GOOG\", year(Date) == 2015) |>\n  select(Date, Close)\ngoogle_2015\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 252 x 2 [!]\n   Date       Close\n   <date>     <dbl>\n 1 2015-01-02  522.\n 2 2015-01-05  511.\n 3 2015-01-06  499.\n 4 2015-01-07  498.\n 5 2015-01-08  500.\n 6 2015-01-09  493.\n 7 2015-01-12  490.\n 8 2015-01-13  493.\n 9 2015-01-14  498.\n10 2015-01-15  499.\n# ℹ 242 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Google stock price\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngoogle_2015 |> autoplot(Close)\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-30-1.png){width=960}\n:::\n:::\n\n\n\n\n## Google stock price\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngoogle_2015 |>\n  ACF(Close, lag_max=100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 100 x 2 [1]\n        lag   acf\n   <cf_lag> <dbl>\n 1        1 0.982\n 2        2 0.959\n 3        3 0.937\n 4        4 0.918\n 5        5 0.901\n 6        6 0.883\n 7        7 0.865\n 8        8 0.849\n 9        9 0.834\n10       10 0.818\n# ℹ 90 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Google stock price\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngoogle_2015 |>\n  ACF(Close, lag_max = 100) |>\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-32-1.png){width=960}\n:::\n:::\n\n\n\n\n## Which is which?\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-33-1.png){width=15cm}\n:::\n:::\n\n\n\n\n# White noise\n\n## Example: White noise {.smaller}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(30)\nwn <- tsibble(t = 1:50, y = rnorm(50), index = t)\nwn |> autoplot(y)\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/wn-1.png){width=960}\n:::\n:::\n\n\n\n\n:::{.callout-note}\nWhite noise data is uncorrelated across time with zero mean and constant variance.\n\n(Technically, we require independence as well.)\n:::\n\n\n## Example: White noise {.smaller}\n\n\n```r\nwn |> ACF(y)\n```\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| $r_{1}$ | $r_{2}$ | $r_{3}$ | $r_{4}$ | $r_{5}$ | $r_{6}$ | $r_{7}$ | $r_{8}$ | $r_{9}$ | $r_{10}$ |\n|:-------:|:-------:|:-------:|:-------:|:-------:|:-------:|:-------:|:-------:|:-------:|:--------:|\n|  0.014  | -0.163  |  0.163  | -0.259  | -0.198  |  0.064  | -0.139  | -0.032  |  0.199  |  -0.024  |\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-34-1.png){width=960}\n:::\n:::\n\n\n\n\n. . .\n\n * Sample autocorrelations for white noise series.\n * Expect each autocorrelation to be close to zero.\n * Blue lines show 95% critical values.\n\n\n\n## \\large Sampling distribution of autocorrelations\n\nSampling distribution of $r_k$ for white noise data is asymptotically N(0,$1/T$).\\pause\n\n  *  95% of all $r_k$ for white noise must lie within $\\pm 1.96/\\sqrt{T}$.\n  * If this is not the case, the series is probably not WN.\n  * Common to plot lines at $\\pm 1.96/\\sqrt{T}$ when plotting ACF.\nThese are the \\alert{critical values}.\n\n## Example: Pigs slaughtered\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npigs <- aus_livestock |>\n  filter(State == \"Victoria\", Animal == \"Pigs\", year(Month) >= 2014)\npigs |> autoplot(Count/1e3) +\n  labs(y = \"Thousands\", title = \"Number of pigs slaughtered in Victoria\")\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-35-1.png){width=960}\n:::\n:::\n\n\n\n\n## Example: Pigs slaughtered\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npigs |> ACF(Count) |> autoplot()\n```\n\n::: {.cell-output-display}\n![](2-tsgraphics_files/figure-revealjs/unnamed-chunk-36-1.png){width=960}\n:::\n:::\n\n\n\n\n## Example: Pigs slaughtered {.smaller}\n\nMonthly total number of pigs slaughtered\nin the state of Victoria, Australia, from January 2014 through December 2018\n(Source: Australian Bureau of Statistics.)\\pause\n\n  * Difficult to detect pattern in time plot.\n  * ACF shows significant autocorrelation for lag 2 and 12.\n  * Indicate some slight seasonality.\n\n. . .\n\n:::{.callout-important}\n\nThese show the series is **not a white noise series**.\n:::\n\n## Your turn\n\nYou can compute the daily changes in the Google stock price in 2018 using\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndgoog <- gafa_stock |>\n  filter(Symbol == \"GOOG\", year(Date) >= 2018) |>\n  mutate(diff = difference(Close))\n```\n:::\n\n\n\n\n\n. . .\n\nDoes `diff` look like white noise?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}