{
  "hash": "9fe150d132f0b5b283b4e082ebc05ff1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chapter 8\\nETS\"\nformat: \n  revealjs:\n    output-file: \"8-ets.html\"\n  html:\n    output-file: \"8-ets_o.html\"\nlogo: \"../img/favicon.png\"\n---\n\n\n\n\n## Setup\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork) #only used for notes\nlibrary(gganimate) # only used for notes\nlibrary(purrr)\nlibrary(rlang)\nlibrary(magick)\nlibrary(fpp3)\n```\n:::\n\n\n\n\n# Exponential smoothing\n\n## Historical perspective {.smaller}\n\n * Developed in the 1950s and 1960s as methods (algorithms) to produce point forecasts.\n * Combine a \"level\", \"trend\" (slope) and \"seasonal\" component to describe a time series.\n * The rate of change of the components are controlled by \"smoothing parameters\": $\\alpha$, $\\beta$ and $\\gamma$ respectively.\n  * Need to choose best values for the smoothing parameters (and initial states).\n  * Equivalent ETS state space models developed in the 1990s and 2000s.\n\n## Big idea: control the rate of change (1/2) {.smaller}\n\n$\\alpha$ controls the flexibility of the **level** (Level - the average value for a specific time period)\n\n* If $\\alpha = 0$, the level never updates (mean)\n* If $\\alpha = 1$, the level updates completely (naive)\n\n. . .\n\n$\\beta$ controls the flexibility of the **trend**\n\n* If $\\beta = 0$, the trend is linear\n* If $\\beta = 1$, the trend changes suddenly every observation\n\n## Big idea: control the rate of change (2/2) {.smaller}\n\n$\\gamma$ controls the flexibility of the **seasonality**\n\n* If $\\gamma = 0$, the seasonality is fixed (seasonal means)\n* If $\\gamma = 1$, the seasonality updates completely (seasonal naive)\n\n## A model for levels, trends, and seasonalities {.smaller}\n\nWe want a model that captures the level ($\\ell_t$), trend ($b_t$) and seasonality ($s_t$).\n\n. . .\n\n**How do we combine these elements?**\n\n. . .\n\n**Additively?**\n$$\ny_t = \\ell_{t-1} + b_{t-1} + s_{t-m} + \\varepsilon_t\n$$\n\n. . .\n\n**Multiplicatively?**\n$$\ny_t = \\ell_{t-1}b_{t-1}s_{t-m}(1 + \\varepsilon_t)\n$$\n\n. . .\n\n**Perhaps a mix of both?**\n$$\ny_t = (\\ell_{t-1} + b_{t-1}) s_{t-m} + \\varepsilon_t\n$$\n\n. . .\n\n**How do the level, trend and seasonal components evolve over time?**\n\n\n## ETS models {.smaller}\n\n**General notation**\n\n|                    |                    |                    |                                      |\n|--------------------|--------------------|--------------------|--------------------------------------|\n| **General notation** |                    | **E T S**           | **ExponenTial Smoothing**       |\n|                    | $\\nearrow$         | $\\uparrow$         | $\\nwarrow$                           |\n| **Error**          |                    | **Trend**          | **Season**                           |\n\n. . .\n\n**Error:** Additive (**A**) or multiplicative (**M**)\n\n**Trend:** None (**N**), additive (**A**), multiplicative (**M**), or damped (**$A_d$** or **$M_d$**).\n\n**Seasonality:** None (**N**), additive (**A**) or multiplicative (**M**)\n\n# Simple exponential smoothing\n\n## Simple methods {.smaller}\n\nTime series $y_1, y_2, \\dots, y_T$.\n\n**Naive (Random walk forecasts)**\n\n\n$$\\hat{y}_{T+h|T} = y_T$$\n\n. . .\n\n**Average forecasts**\n\n$$\n\\hat{y}_{T+h|T} = \\frac{1}{T} \\sum_{t=1}^T y_t\n$$\n\n* Want something in between these methods.\n* Most recent data should have more weight.\n\n. . .\n\n**Simple exponential smoothing uses a weighted moving average with weights that decrease exponentially.**\n\n\n## Simple Exponential Smoothing {.smaller}\n\n**Forecast equation**\n\n$$\n\\hat{y}_{T+1|T} = \\alpha y_T + \\alpha(1-\\alpha) y_{T-1} + \\alpha(1-\\alpha)^2 y_{T-2} + \\cdots\n$$\n\nwhere $0 \\le \\alpha \\le 1$.\n\n. . .\n\n**Weights assigned to observations for:**\n\n\\small\n\n| Observation | $\\alpha = 0.2$ | $\\alpha = 0.4$ | $\\alpha = 0.6$ | $\\alpha = 0.8$ |\n|-------------|----------------|----------------|----------------|----------------|\n| $y_{T}$     | 0.2            | 0.4            | 0.6            | 0.8            |\n| $y_{T-1}$   | 0.16           | 0.24           | 0.24           | 0.16           |\n| $y_{T-2}$   | 0.128          | 0.144          | 0.096          | 0.032          |\n| $y_{T-3}$   | 0.1024         | 0.0864         | 0.0384         | 0.0064         |\n| $y_{T-4}$   | $(0.2)(0.8)^4$ | $(0.4)(0.6)^4$ | $(0.6)(0.4)^4$ | $(0.8)(0.2)^4$ |\n| $y_{T-5}$   | $(0.2)(0.8)^5$ | $(0.4)(0.6)^5$ | $(0.6)(0.4)^5$ | $(0.8)(0.2)^5$ |\n\n## Simple Exponential Smoothing\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgeria_economy <- global_economy |>\n  filter(Country == \"Algeria\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/alpha-anim-1.gif)\n:::\n:::\n\n\n\n\n## Simple Exponential Smoothing {.smaller}\n\n**Component form**\n\n\\begin{align*}\n\\text{Forecast equation} && \\hat{y}_{t+h|t} &= \\ell_{t} \\\\\n\\text{Smoothing equation} && \\ell_{t} &= \\alpha y_{t} + (1 - \\alpha)\\ell_{t-1}\n\\end{align*}\n\n* $\\ell_t$ is the level (or the smoothed value) of the series at time t.\n* $\\hat{y}_{t+1|t} = \\alpha y_t + (1-\\alpha) \\hat{y}_{t|t-1}$\n* The process has to start somewhere, so we let the first fitted value at time 1 be denoted by $\\ell_0$ (which we will have to estimate)\n. . .\n\n## Simple Exponential Smoothing {.smaller}\n\nIterate to get exponentially weighted moving average form.\n\n**Weighted average form**\n\n$$\n\\hat{y}_{T+1|T} = \\sum_{j=0}^{T-1} \\alpha(1-\\alpha)^j y_{T-j} + (1-\\alpha)^T \\ell_{0}\n$$\n\n\n\n## Optimizing smoothing parameters {.smaller}\n\n  * Need to choose best values for $\\alpha$ and $\\ell_0$.\n  * Similarly to regression, choose optimal parameters by minimizing SSE:\n  \n. . .\n  \n$$\n  \\text{SSE}=\\sum_{t=1}^T(y_t - \\hat{y}{t}{t-1})^2.\n$$\n\n  * Unlike regression there is no closed form solution --- use numerical optimization.\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n* For Algerian Exports example:\n  - $\\hat\\alpha = 0.8400$\n  - $\\hat\\ell_0 = 39.54$\n\n## Simple Exponential Smoothing\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/alpha-static-1.png){width=768}\n:::\n:::\n\n\n\n\n## Models and methods{.smaller}\n\n**Methods**\n\n  * Algorithms that return point forecasts.\n\n. . .\n\n**Models**\n\n  * Generate same point forecasts but can also generate forecast distributions.\n  * A stochastic (or random) data generating process that can generate an entire forecast distribution.\n  * Allow for \"proper\" model selection.\n\n## ETS(A,N,N): SES with additive errors {.smaller}\n\n**Component form**\n\n\n\\begin{align*}\n\\text{Forecast equation} && \\hat{y}_{t+h|t} &= \\ell_{t} \\\\\n\\text{Smoothing equation} && \\ell_{t} &= \\alpha y_{t} + (1 - \\alpha)\\ell_{t-1}\n\\end{align*}\n\n\n**Forecast error:** $e_t = y_t - \\hat{y}_{t|t-1} = y_t - \\ell_{t-1}$.\n\n**Error correction form**\n\n\n\\begin{align*}\ny_t &= \\ell_{t-1} + e_t \\\\\n\\ell_{t} &= \\ell_{t-1} + \\alpha (y_t - \\ell_{t-1}) \\\\\n         &= \\ell_{t-1} + \\alpha e_t\n\\end{align*}\n\n\nSpecify probability distribution for $e_t$, we assume $e_t = \\varepsilon_t \\sim \\text{NID}(0, \\sigma^2)$.\n\n## ETS(A,N,N): SES with additive errors {.smaller}\n\n\n\\begin{align*}\n\\text{Measurement equation} && y_t &= \\ell_{t-1} + \\varepsilon_t \\\\\n\\text{State equation} && \\ell_t &= \\ell_{t-1} + \\alpha \\varepsilon_t\n\\end{align*}\n\n\nwhere $\\varepsilon_t \\sim \\text{NID}(0, \\sigma^2)$.\n\n\n- \"Innovations\" or \"single source of error\" because equations have the same error process, $\\varepsilon_t$.\n- Measurement equation: relationship between observations and states.\n- State equation(s): evolution of the state(s) through time.\n\n## ETS(M,N,N): SES with multiplicative errors {.smaller}\n\n- Specify relative errors $\\varepsilon_t = \\frac{y_t - \\hat{y}_{t|t-1}}{\\hat{y}_{t|t-1}} \\sim \\text{NID}(0, \\sigma^2)$\n- Substituting $\\hat{y}_{t|t-1} = \\ell_{t-1}$ gives:\n  - $y_t = \\ell_{t-1} + \\ell_{t-1} \\varepsilon_t$\n  - $e_t = y_t - \\hat{y}_{t|t-1} = \\ell_{t-1} \\varepsilon_t$\n. . .\n\n## ETS(M,N,N): SES with multiplicative errors {.smaller}\n\n**Measurement equation**\n\n\\begin{align*}\n\\text{Measurement equation} && y_t &= \\ell_{t-1} (1 + \\varepsilon_t) \\\\\n\\text{State equation} && \\ell_t &= \\ell_{t-1} (1 + \\alpha \\varepsilon_t)\n\\end{align*}\n\n- Models with additive and multiplicative errors with the same parameters generate the same point forecasts but different prediction intervals.\n\n## ETS(A,N,N): Specifying the model\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nETS(y ~ error(\"A\") + trend(\"N\") + season(\"N\"))\n```\n:::\n\n\n\n\nBy default, an optimal value for $\\alpha$ and $\\ell_0$ is used.\n\n$\\alpha$ can be chosen manually in `trend()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrend(\"N\", alpha = 0.5)\ntrend(\"N\", alpha_range = c(0.2, 0.8))\n```\n:::\n\n\n\n\n## Example: Algerian Exports (1/4)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgeria_economy <- global_economy |>\n  filter(Country == \"Algeria\")\nfit <- algeria_economy |>\n  model(ANN = ETS(Exports ~ error(\"A\") + trend(\"N\") + season(\"N\")))\nreport(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Exports \nModel: ETS(A,N,N) \n  Smoothing parameters:\n    alpha = 0.8399875 \n\n  Initial states:\n   l[0]\n 39.539\n\n  sigma^2:  35.6301\n\n     AIC     AICc      BIC \n446.7154 447.1599 452.8968 \n```\n\n\n:::\n:::\n\n\n\n\n## Example: Algerian Exports (2/4) {.smaller}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomponents(fit) |> autoplot()\n```\n\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/ses-cmp0-1.png){width=960}\n:::\n:::\n\n\n\n\n## Example: Algerian Exports (3/4)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomponents(fit) |>\n  left_join(fitted(fit), by = c(\"Country\", \".model\", \"Year\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A dable: 59 x 7 [1Y]\n# Key:     Country, .model [1]\n# :        Exports = lag(level, 1) + remainder\n   Country .model  Year Exports level remainder .fitted\n   <fct>   <chr>  <dbl>   <dbl> <dbl>     <dbl>   <dbl>\n 1 Algeria ANN     1959    NA    39.5    NA        NA  \n 2 Algeria ANN     1960    39.0  39.1    -0.496    39.5\n 3 Algeria ANN     1961    46.2  45.1     7.12     39.1\n 4 Algeria ANN     1962    19.8  23.8   -25.3      45.1\n 5 Algeria ANN     1963    24.7  24.6     0.841    23.8\n 6 Algeria ANN     1964    25.1  25.0     0.534    24.6\n 7 Algeria ANN     1965    22.6  23.0    -2.39     25.0\n 8 Algeria ANN     1966    26.0  25.5     3.00     23.0\n 9 Algeria ANN     1967    23.4  23.8    -2.07     25.5\n10 Algeria ANN     1968    23.1  23.2    -0.630    23.8\n# ℹ 49 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Example: Algerian Exports (4/4) {.smaller}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit |>\n  forecast(h = 5) |>\n  autoplot(algeria_economy) +\n  labs(y = \"% of GDP\", title = \"Exports: Algeria\")\n```\n\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/ses-fc-1.png){width=960}\n:::\n:::\n\n\n\n\n# Models with trend\n\n## Holt's linear trend {.smaller}\n\n**Component form**\n\n\n\\begin{align*}\n\\text{Forecast} && \\hat{y}_{t+h|t} &= \\ell_{t} + hb_{t} \\\\\n\\text{Level} && \\ell_{t} &= \\alpha y_{t} + (1 - \\alpha)(\\ell_{t-1} + b_{t-1}) \\\\\n\\text{Trend} && b_{t} &= \\beta^*(\\ell_{t} - \\ell_{t-1}) + (1 - \\beta^*)b_{t-1}\n\\end{align*}\n\n\n- Two smoothing parameters $\\alpha$ and $\\beta^*$ ($0 \\le \\alpha, \\beta^* \\le 1$).\n- $\\ell_t$ level: weighted average between $y_t$ and one-step ahead forecast for time $t$, $(\\ell_{t-1} + b_{t-1} = \\hat{y}_{t|t-1})$\n- $b_t$ slope: weighted average of $(\\ell_{t} - \\ell_{t-1})$ and $b_{t-1}$, current and previous estimate of slope.\n- Choose $\\alpha, \\beta^*, \\ell_0, b_0$ to minimize SSE.\n\n## ETS(A,A,N) {.smaller}\n\nHolt's linear method with additive errors.\n\n- Assume $\\varepsilon_t = y_t - \\ell_{t-1} - b_{t-1} \\sim \\text{NID}(0, \\sigma^2)$.\n- Substituting into the error correction equations for Holt's linear method:\n\n. . .\n\n\\begin{align*}\ny_t &= \\ell_{t-1} + b_{t-1} + \\varepsilon_t \\\\\n\\ell_t &= \\ell_{t-1} + b_{t-1} + \\alpha \\varepsilon_t \\\\\nb_t &= b_{t-1} + \\alpha \\beta^* \\varepsilon_t\n\\end{align*}\n\n\n- For simplicity, set $\\beta = \\alpha \\beta^*$.\n\n## Exponential smoothing: trend/slope\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/beta-anim-1.gif)\n:::\n:::\n\n\n\n\n## ETS(M,A,N) {.smaller}\n\nHolt's linear method with multiplicative errors.\n\n  * Assume $\\varepsilon_t=\\frac{y_t-(\\ell_{t-1}+b_{t-1})}{(\\ell_{t-1}+b_{t-1})}$\n  * Following a similar approach as above, the innovations state space model underlying Holt's linear method with multiplicative errors is specified as\n\n. . .\n\n\\begin{align*}\n    y_t&=(\\ell_{t-1}+b_{t-1})(1+\\varepsilon_t)\\\\\n    \\ell_t&=(\\ell_{t-1}+b_{t-1})(1+\\alpha \\varepsilon_t)\\\\\n    b_t&=b_{t-1}+\\beta(\\ell_{t-1}+b_{t-1}) \\varepsilon_t\n\\end{align*}\n\n  where again  $\\beta=\\alpha \\beta^*$ and $\\varepsilon_t \\sim \\text{NID}(0,\\sigma^2)$.\n\n## ETS(A,A,N): Specifying the model\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nETS(y ~ error(\"A\") + trend(\"A\") + season(\"N\"))\n```\n:::\n\n\n\n\n. . .\n\nBy default, optimal values for $\\beta$ and $b_0$ are used.\n\n$\\beta$ can be chosen manually in `trend()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrend(\"A\", beta = 0.004)\ntrend(\"A\", beta_range = c(0, 0.1))\n```\n:::\n\n\n\n\n## Example: Australian population (1/4) {.smaller}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naus_economy <- global_economy |> filter(Code == \"AUS\") |>\n  mutate(Pop = Population / 1e6)\nfit <- aus_economy |>\n  model(AAN = ETS(Pop ~ error(\"A\") + trend(\"A\") + season(\"N\")))\nreport(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Pop \nModel: ETS(A,A,N) \n  Smoothing parameters:\n    alpha = 0.9999 \n    beta  = 0.3266366 \n\n  Initial states:\n     l[0]      b[0]\n 10.05414 0.2224818\n\n  sigma^2:  0.0041\n\n      AIC      AICc       BIC \n-76.98569 -75.83184 -66.68347 \n```\n\n\n:::\n:::\n\n\n\n\n## Example: Australian population (2/4) {.smaller}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomponents(fit) |> autoplot()\n```\n\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/holt-cmp-plot-1.png){width=960}\n:::\n:::\n\n\n\n\n## Example: Australian population (3/4) {.smaller}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomponents(fit) |>\n  left_join(fitted(fit), by = c(\"Country\", \".model\", \"Year\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A dable: 59 x 8 [1Y]\n# Key:     Country, .model [1]\n# :        Pop = lag(level, 1) + lag(slope, 1) + remainder\n   Country   .model  Year   Pop level slope remainder .fitted\n   <fct>     <chr>  <dbl> <dbl> <dbl> <dbl>     <dbl>   <dbl>\n 1 Australia AAN     1959  NA    10.1 0.222 NA           NA  \n 2 Australia AAN     1960  10.3  10.3 0.222 -0.000145    10.3\n 3 Australia AAN     1961  10.5  10.5 0.217 -0.0159      10.5\n 4 Australia AAN     1962  10.7  10.7 0.231  0.0418      10.7\n 5 Australia AAN     1963  11.0  11.0 0.223 -0.0229      11.0\n 6 Australia AAN     1964  11.2  11.2 0.221 -0.00641     11.2\n 7 Australia AAN     1965  11.4  11.4 0.221 -0.000314    11.4\n 8 Australia AAN     1966  11.7  11.7 0.235  0.0418      11.6\n 9 Australia AAN     1967  11.8  11.8 0.206 -0.0869      11.9\n10 Australia AAN     1968  12.0  12.0 0.208  0.00350     12.0\n# ℹ 49 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Example: Australian population (4/4) {.smaller}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit |>\n  forecast(h = 10) |>\n  autoplot(aus_economy) +\n  labs(y = \"Millions\", title = \"Population: Australia\")\n```\n\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/holt-fc-1.png){width=960}\n:::\n:::\n\n\n\n\n## Damped trend method {.smaller}\n\n**Component form**\n\n\n\\begin{align*}\n\\hat{y}_{t+h|t} &= \\ell_{t} + (\\phi + \\phi^2 + \\dots + \\phi^{h})b_{t} \\\\\n\\ell_{t} &= \\alpha y_{t} + (1 - \\alpha)(\\ell_{t-1} + \\phi b_{t-1}) \\\\\nb_{t} &= \\beta^*(\\ell_{t} - \\ell_{t-1}) + (1 - \\beta^*)\\phi b_{t-1}\n\\end{align*}\n\n  * Damping parameter $0<\\phi<1$.\n  * If $\\phi=1$, identical to Holt's linear trend.\n  * As $h\\rightarrow\\infty$, $\\hat{y}{T+h}{T}\\rightarrow \\ell_T+\\phi b_T/(1-\\phi)$.\n  * Short-run forecasts trended, long-run forecasts constant.\n\n## Your turn\n\\large \n\n**Write down the model for ETS(A,$A_d$,N)**\n\n\n\n## Example: Australian population ct. (1/3) {.smaller}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naus_economy |>\n  model(holt = ETS(Pop ~ error(\"A\") + trend(\"Ad\") + season(\"N\"))) |>\n  forecast(h = 20) |>\n  autoplot(aus_economy)\n```\n\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n\n\n\n## Example: Australian population ct. (2/3){.smaller}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- aus_economy |>\n  filter(Year <= 2010) |>\n  model(\n    ses = ETS(Pop ~ error(\"A\") + trend(\"N\") + season(\"N\")),\n    holt = ETS(Pop ~ error(\"A\") + trend(\"A\") + season(\"N\")),\n    damped = ETS(Pop ~ error(\"A\") + trend(\"Ad\") + season(\"N\"))\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(fit)\naccuracy(fit)\n```\n:::\n\n\n\n\n## Example: Australian population ct. (3/3){.smaller}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|          term|   SES| Linear trend| Damped trend|\n|-------------:|-----:|------------:|------------:|\n|      $\\alpha$|  1.00|         1.00|         1.00|\n|     $\\beta^*$|      |         0.30|         0.40|\n|        $\\phi$|      |             |         0.98|\n|            NA|      |         0.22|         0.25|\n|            NA| 10.28|        10.05|        10.04|\n| Training RMSE|  0.24|         0.06|         0.07|\n|     Test RMSE|  1.63|         0.15|         0.21|\n|     Test MASE|  6.18|         0.55|         0.75|\n|     Test MAPE|  6.09|         0.55|         0.74|\n|      Test MAE|  1.45|         0.13|         0.18|\n\n\n:::\n:::\n\n\n\n\n\n## Your turn {.smaller}\n\n`prices` contains the price of a dozen eggs in the United States from 1900–1993\n\n1. Use SES and Holt’s method (with and without damping) to forecast “future” data.\n\n:::{.callout-tip}\nUse h=100 so you can clearly see the differences between the options when plotting the forecasts.\n:::\n\n2. Which method gives the best training RMSE?\n3. Are these RMSE values comparable?\n4. Do the residuals from the best fitting method look like white noise?\n\n\n# Models with seasonality\n\n## Holt-Winters additive method {.smaller}\n\nHolt and Winters extended Holt's method to capture seasonality.\n\n**Component form**\n\n\n\\begin{align*}\n\\hat{y}_{t+h|t} &= \\ell_{t} + hb_{t} + s_{t+h-m(k+1)} \\\\\n\\ell_{t} &= \\alpha(y_{t} - s_{t-m}) + (1 - \\alpha)(\\ell_{t-1} + b_{t-1}) \\\\\nb_{t} &= \\beta^*(\\ell_{t} - \\ell_{t-1}) + (1 - \\beta^*)b_{t-1} \\\\\ns_{t} &= \\gamma (y_{t} - \\ell_{t-1} - b_{t-1}) + (1 - \\gamma)s_{t-m}\n\\end{align*}\n\n\n  * $k=$ integer part of $(h-1)/m$. Ensures estimates from the final year are used for forecasting.\n  * Parameters:&nbsp; $0\\le \\alpha\\le 1$,&nbsp; $0\\le \\beta^*\\le 1$,&nbsp; $0\\le \\gamma\\le 1-\\alpha$&nbsp;  and $m=$  period of seasonality (e.g. $m=4$ for quarterly data).\n\n## Holt-Winters additive method{.smaller}\n\n  * Seasonal component is usually expressed as\n        $s_{t} = \\gamma^* (y_{t}-\\ell_{t})+ (1-\\gamma^*)s_{t-m}.$\n  * Substitute in for $\\ell_t$:\n        $s_{t} = \\gamma^*(1-\\alpha) (y_{t}-\\ell_{t-1}-b_{t-1})+ [1-\\gamma^*(1-\\alpha)]s_{t-m}$\n  * We set $\\gamma=\\gamma^*(1-\\alpha)$.\n  * The usual parameter restriction is $0\\le\\gamma^*\\le1$, which translates to $0\\le\\gamma\\le(1-\\alpha)$.\n\n## Exponential smoothing: seasonality\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/gamma-anim-1.gif)\n:::\n:::\n\n\n\n\n## ETS(A,A,A) {.smaller}\n\nHolt-Winters additive method with additive errors.\n\n\n\\begin{array}{ll}\n\\text{Forecast equation} & \\hat{y}_{t+h|t} = \\ell_{t} + hb_{t} + s_{t+h-m(k+1)} \\\\\n\\text{Observation equation} & y_t = \\ell_{t-1} + b_{t-1} + s_{t-m} + \\varepsilon_t \\\\\n\\text{State equations} & \\ell_t = \\ell_{t-1} + b_{t-1} + \\alpha \\varepsilon_t \\\\\n& b_t = b_{t-1} + \\beta \\varepsilon_t \\\\\n& s_t = s_{t-m} + \\gamma \\varepsilon_t\n\\end{array}\n\n\n* Forecast errors: $\\varepsilon_{t} = y_t - \\hat{y}_{t|t-1}$\n* $k$ is integer part of $(h-1)/m$.\n\n## Your turn\n\n\\large\n\n**Write down the model for ETS(A,N,A)**\n\n## Holt-Winters multiplicative method {.smaller}\n\nSeasonal variations change in proportion to the level of the series.\n\n**Component form**\n\n\n\\begin{align*}\n\\hat{y}_{t+h|t} &= (\\ell_{t} + hb_{t})s_{t+h-m(k+1)} \\\\\n\\ell_{t} &= \\alpha \\frac{y_{t}}{s_{t-m}} + (1 - \\alpha)(\\ell_{t-1} + b_{t-1}) \\\\\nb_{t} &= \\beta^*(\\ell_{t} - \\ell_{t-1}) + (1 - \\beta^*)b_{t-1} \\\\\ns_{t} &= \\gamma \\frac{y_{t}}{(\\ell_{t-1} + b_{t-1})} + (1 - \\gamma)s_{t-m}\n\\end{align*}\n\n\n  * $k$ is integer part of $(h-1)/m$.\n  * Additive method: $s_t$ in absolute terms --- within each year $\\sum_i s_i \\approx 0$.\n  * Multiplicative method: $s_t$ in relative terms --- within each year $\\sum_i s_i \\approx m$.\n\n## ETS(M,A,M) {.smaller}\n\nHolt-Winters multiplicative method with multiplicative errors.\n\n\n\\begin{align*}\n\\text{Forecast equation} && \\hat{y}_{t+h|t} &= (\\ell_{t} + hb_{t}) s_{t+h-m(k+1)} \\\\\n\\text{Observation equation} && y_t &= (\\ell_{t-1} + b_{t-1})s_{t-m}(1 + \\varepsilon_t) \\\\\n\\text{State equations} && \\ell_t &= (\\ell_{t-1} + b_{t-1})(1 + \\alpha \\varepsilon_t) \\\\\n&& b_t &= b_{t-1} + \\beta(\\ell_{t-1} + b_{t-1}) \\varepsilon_t \\\\\n&& s_t &= s_{t-m}(1 + \\gamma \\varepsilon_t)\n\\end{align*}\n\n\n* Forecast errors: $\\varepsilon_{t} = (y_t - \\hat{y}_{t|t-1})/\\hat{y}_{t|t-1}$\n* $k$ is integer part of $(h-1)/m$.\n\n## Example: Australian holiday tourism (1/2){.smaller}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naus_holidays <- tourism |>\n  filter(Purpose == \"Holiday\") |>\n  summarise(Trips = sum(Trips))\nfit <- aus_holidays |>\n  model(\n    additive = ETS(Trips ~ error(\"A\") + trend(\"A\") + season(\"A\")),\n    multiplicative = ETS(Trips ~ error(\"M\") + trend(\"A\") + season(\"M\"))\n  )\nfc <- fit |> forecast()\n```\n:::\n\n\n\n\n## Example: Australian holiday tourism (2/2){.smaller}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfc |>\n  autoplot(aus_holidays, level = NULL) +\n  labs(y = \"Thousands\", title = \"Overnight trips\")\n```\n\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n\n\n## Estimated components (1/2)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomponents(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A dable: 168 x 7 [1Q]\n# Key:     .model [2]\n# :        Trips = lag(level, 1) + lag(slope, 1) + lag(season, 4) + remainder\n   .model   Quarter  Trips level slope season remainder\n   <chr>      <qtr>  <dbl> <dbl> <dbl>  <dbl>     <dbl>\n 1 additive 1997 Q1    NA    NA   NA    1512.      NA  \n 2 additive 1997 Q2    NA    NA   NA    -290.      NA  \n 3 additive 1997 Q3    NA    NA   NA    -684.      NA  \n 4 additive 1997 Q4    NA  9899. -37.4  -538.      NA  \n 5 additive 1998 Q1 11806. 9964. -24.5  1512.     433. \n 6 additive 1998 Q2  9276. 9851. -35.6  -290.    -374. \n 7 additive 1998 Q3  8642. 9700. -50.2  -684.    -489. \n 8 additive 1998 Q4  9300. 9694. -44.6  -538.     188. \n 9 additive 1999 Q1 11172. 9652. -44.3  1512.      10.7\n10 additive 1999 Q2  9608. 9676. -35.6  -290.     290. \n# ℹ 158 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Estimated components (2/2)\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/fig-7-LevelTrendSeas-1.png){#fig-7-LevelTrendSeas width=100%}\n:::\n:::\n\n\n\n\n## Holt-Winters damped method {.smaller}\n\nOften the single most accurate forecasting method for seasonal data:\n\n\n\\begin{align*}\n\\hat{y}_{t+h|t} &= [\\ell_{t} + (\\phi + \\phi^2 + \\dots + \\phi^{h})b_{t}]s_{t+h-m(k+1)} \\\\\n\\ell_{t} &= \\alpha \\left(\\frac{y_{t}}{s_{t-m}}\\right) + (1 - \\alpha)(\\ell_{t-1} + \\phi b_{t-1}) \\\\\nb_{t} &= \\beta^*(\\ell_{t} - \\ell_{t-1}) + (1 - \\beta^*)\\phi b_{t-1} \\\\\ns_{t} &= \\gamma \\left(\\frac{y_{t}}{(\\ell_{t-1} + \\phi b_{t-1})}\\right) + (1 - \\gamma)s_{t-m}\n\\end{align*}\n\n\n\n## Your turn {.smaller}\n\nApply Holt-Winters’ multiplicative method to the Gas data from `aus_production`.\n\n 1. Why is multiplicative seasonality necessary here?\n 2. Experiment with making the trend damped.\n 3. Check that the residuals from the best method look like white noise.\n\n\n## Holt-Winters with daily data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsth_cross_ped <- pedestrian |>\n  filter(\n    Date >= \"2016-07-01\",\n    Sensor == \"Southern Cross Station\"\n  ) |>\n  index_by(Date) |>\n  summarise(Count = sum(Count) / 1000)\nsth_cross_ped |>\n  filter(Date <= \"2016-07-31\") |>\n  model(\n    hw = ETS(Count ~ error(\"M\") + trend(\"Ad\") + season(\"M\"))\n  ) |>\n  forecast(h = \"2 weeks\") |>\n  autoplot(sth_cross_ped |> filter(Date <= \"2016-08-14\")) +\n  labs(\n    title = \"Daily traffic: Southern Cross\",\n    y = \"Pedestrians ('000)\"\n  )\n```\n:::\n\n\n\n\n## Holt-Winters with daily data\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/hwdaily_repeat-1.png){width=960}\n:::\n:::\n\n\n\n\n# Innovations state space models\n\n## Exponential smoothing methods {.smaller}\n\n\n| **Trend Component**         | **Seasonal** |  **Component**||\n|-----------------------------|--------------|------------------|------------------------|\n|                             | **N (None)** | **A (Additive)** | **M (Multiplicative)** |\n| **N (None)**                | (N,N)        | (N,A)            | (N,M)                  |\n| **A (Additive)**            | (A,N)        | (A,A)            | (A,M)                  |\n| **$A_d$ (Additive damped)** | ($A_d$,N)    | ($A_d$,A)        | ($A_d$,M)              |\n\n\n## Exponential smoothing methods {.smaller}\n\n\n| **Method**          | **Description**                             |\n|---------------------|---------------------------------------------|\n| **(N,N)**           | Simple exponential smoothing                |\n| **(A,N)**           | Holt's linear method                        |\n| **($A_d$,N)**    | Additive damped trend method                |\n| **(A,A)**           | Additive Holt-Winters' method               |\n| **(A,M)**           | Multiplicative Holt-Winters' method         |\n| **($A_d$,M)**    | Damped multiplicative Holt-Winters' method  |\n\n. . .\n\n**There are also multiplicative trend methods (not recommended).**\n\n\n## ETS models {.smaller}\n\n\n**Additive Error**\n\n| **Trend Component**         | **Seasonal** |  **Component**||\n|-----------------------------|--------------|------------------|------------------------|\n|                             | **N (None)** | **A (Additive)** | **M (Multiplicative)** |\n| **N (None)**                | A,N,N        | A,N,A            | A,N,M                  |\n| **A (Additive)**            | A,A,N        | A,A,A            | A,A,M                  |\n| **$A_d$** (Additive damped) | A,$A_d$,N | A,$A_d$,A     | A,$A_d$,M           |\n\n. . .\n\n**Multiplicative Error**\n\n| **Trend Component**           | **Seasonal**              |  **Component**||\n|-----------------------------|--------------|------------------|------------------------|\n|                               | **N (None)**              | **A (Additive)** | **M (Multiplicative)** |\n| **N (None)**                  | M,N,N                     | M,N,A            | M,N,M                  |\n| **A (Additive)**              | M,A,N                     | M,A,A            | M,A,M                  |\n| **$A_d$** (Additive damped)   | M,$A_d$,N                 | M,$A_d$,A        | M,$A_d$,M              |\n\n## Additive error models\n\n<iframe src=\"figs/fig_7_ets_add.pdf\" width=\"100%\" height=\"600px\"></iframe>\n\n## Multiplicative error models\n\n<iframe src=\"figs/fig_7_ets_multi.pdf\" width=\"100%\" height=\"600px\"></iframe>\n\n## Estimating ETS models {.smaller}\n\n  * Smoothing parameters $\\alpha$, $\\beta$, $\\gamma$ and $\\phi$, and the initial states $\\ell_0$, $b_0$, $s_0,s_{-1},\\dots,s_{-m+1}$ are estimated by maximizing the \"likelihood\" = the probability of the data arising from the specified model.\n  * For models with additive errors equivalent to minimizing SSE.\n  * For models with multiplicative errors,  **not** equivalent to minimizing SSE.\n\n## Innovations state space models {.smaller}\n\n**Estimation**\n\n\n$$L^*(\\theta,\\textbf{x}_0) = T\\log\\!\\left(\\sum_{t=1}^T \\varepsilon^2_t\\!\\right) + 2\\sum_{t=1}^T \\log|k(\\textbf{x}_{t-1})|$$\n\n\n$$= -2\\log(\\text{Likelihood}) + \\text{constant}$$\n\n\n* Estimate parameters $\\theta = (\\alpha,\\beta,\\gamma,\\phi)$ and\ninitial states $\\textbf{x}_0 = (\\ell_0,b_0,s_0,s_{-1},\\dots,s_{-m+1})$ by\nminimizing $L^*$.\n\n## Parameter restrictions {.smaller}\n\n\n**Usual region**\n\n* Traditional restrictions in the methods $0< \\alpha,\\beta^*,\\gamma^*,\\phi<1$\\newline (equations interpreted as weighted averages).\n* In models we set $\\beta=\\alpha\\beta^*$ and $\\gamma=(1-\\alpha)\\gamma^*$.\n* Therefore $0< \\alpha <1$, &nbsp;&nbsp; $0 < \\beta < \\alpha$ &nbsp;&nbsp; and $0< \\gamma < 1-\\alpha$.\n* $0.8<\\phi<0.98$ --- to prevent numerical difficulties.\n\n\n**Admissible region**\n\n  * To prevent observations in the distant past having a continuing effect on current forecasts.\n  * Usually (but not always) less restrictive than *traditional* region.\n  * For example for ETS(A,N,N): \\newline *traditional* $0< \\alpha <1$ while *admissible* $0< \\alpha <2$.\n\n## Model selection {.smaller}\n\n\n**Akaike's Information Criterion**\n\n\n\\text{AIC} = -2\\log(\\text{L}) + 2k\n\nwhere $L$ is the likelihood and $k$ is the number of parameters initial states estimated in the model.\n\n. . .\n\n**Corrected AIC**\n\n\n$$\\text{AIC}_{\\text{c}} = \\text{AIC} + \\frac{2k(k+1)}{T-k-1}$$\n\nwhich is the AIC corrected (for small sample bias).\n\n. . .\n\n**Bayesian Information Criterion**\n\n\n$$\\text{BIC} = \\text{AIC} + k[\\log(T)-2].$$\n\n\n## Automatic forecasting {.smaller}\n\n**From Hyndman et al.\\ (IJF, 2002):**\n\n* Apply each model that is appropriate to the data.\nOptimize parameters and initial values using MLE (or some other\ncriterion).\n* Select best method using AICc:\n* Produce forecasts using best method.\n* Obtain forecast intervals using underlying state space model.\n\n. . .\n\n:::{.callout-note}\nMethod performed very well in M3 competition.\n:::\n\n## Example: National populations (1/2)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- global_economy |>\n  mutate(Pop = Population / 1e6) |>\n  model(ets = ETS(Pop))\nfit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A mable: 263 x 2\n# Key:     Country [263]\n   Country                      ets\n   <fct>                    <model>\n 1 Afghanistan         <ETS(A,A,N)>\n 2 Albania             <ETS(M,A,N)>\n 3 Algeria             <ETS(M,A,N)>\n 4 American Samoa      <ETS(M,A,N)>\n 5 Andorra             <ETS(M,A,N)>\n 6 Angola              <ETS(M,A,N)>\n 7 Antigua and Barbuda <ETS(M,A,N)>\n 8 Arab World          <ETS(M,A,N)>\n 9 Argentina           <ETS(A,A,N)>\n10 Armenia             <ETS(M,A,N)>\n# ℹ 253 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Example: National populations (2/2)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit |>\n  forecast(h = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A fable: 1,315 x 5 [1Y]\n# Key:     Country, .model [263]\n   Country  .model  Year             Pop\n   <fct>    <chr>  <dbl>          <dist>\n 1 Afghani… ets     2018    N(36, 0.012)\n 2 Afghani… ets     2019    N(37, 0.059)\n 3 Afghani… ets     2020     N(38, 0.16)\n 4 Afghani… ets     2021     N(39, 0.35)\n 5 Afghani… ets     2022     N(40, 0.64)\n 6 Albania  ets     2018 N(2.9, 0.00012)\n 7 Albania  ets     2019   N(2.9, 6e-04)\n 8 Albania  ets     2020  N(2.9, 0.0017)\n 9 Albania  ets     2021  N(2.9, 0.0036)\n10 Albania  ets     2022  N(2.9, 0.0066)\n# ℹ 1,305 more rows\n# ℹ 1 more variable: .mean <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## Example: Australian holiday tourism (1/9)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nholidays <- tourism |>\n  filter(Purpose == \"Holiday\")\nfit <- holidays |> model(ets = ETS(Trips))\nfit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A mable: 76 x 4\n# Key:     Region, State, Purpose [76]\n   Region                     State              Purpose          ets\n   <chr>                      <chr>              <chr>        <model>\n 1 Adelaide                   South Australia    Holiday <ETS(A,N,A)>\n 2 Adelaide Hills             South Australia    Holiday <ETS(A,A,N)>\n 3 Alice Springs              Northern Territory Holiday <ETS(M,N,A)>\n 4 Australia's Coral Coast    Western Australia  Holiday <ETS(M,N,A)>\n 5 Australia's Golden Outback Western Australia  Holiday <ETS(M,N,M)>\n 6 Australia's North West     Western Australia  Holiday <ETS(A,N,A)>\n 7 Australia's South West     Western Australia  Holiday <ETS(M,N,M)>\n 8 Ballarat                   Victoria           Holiday <ETS(M,N,A)>\n 9 Barkly                     Northern Territory Holiday <ETS(A,N,A)>\n10 Barossa                    South Australia    Holiday <ETS(A,N,N)>\n# ℹ 66 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Example: Australian holiday tourism (2/9)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit |>\n  filter(Region == \"Snowy Mountains\") |>\n  report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Trips \nModel: ETS(M,N,A) \n  Smoothing parameters:\n    alpha = 0.1571013 \n    gamma = 0.0001000991 \n\n  Initial states:\n     l[0]      s[0]    s[-1]     s[-2]     s[-3]\n 141.6782 -60.95904 130.8567 -42.23776 -27.65986\n\n  sigma^2:  0.0388\n\n     AIC     AICc      BIC \n852.0452 853.6008 868.7194 \n```\n\n\n:::\n:::\n\n\n\n\n## Example: Australian holiday tourism (3/9)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit |>\n  filter(Region == \"Snowy Mountains\") |>\n  components(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A dable: 84 x 9 [1Q]\n# Key:     Region, State, Purpose, .model [1]\n# :        Trips = (lag(level, 1) + lag(season, 4)) * (1 + remainder)\n   Region          State           Purpose .model Quarter Trips level season remainder\n   <chr>           <chr>           <chr>   <chr>    <qtr> <dbl> <dbl>  <dbl>     <dbl>\n 1 Snowy Mountains New South Wales Holiday ets    1997 Q1  NA     NA   -27.7   NA     \n 2 Snowy Mountains New South Wales Holiday ets    1997 Q2  NA     NA   -42.2   NA     \n 3 Snowy Mountains New South Wales Holiday ets    1997 Q3  NA     NA   131.    NA     \n 4 Snowy Mountains New South Wales Holiday ets    1997 Q4  NA    142.  -61.0   NA     \n 5 Snowy Mountains New South Wales Holiday ets    1998 Q1 101.   140.  -27.7   -0.113 \n 6 Snowy Mountains New South Wales Holiday ets    1998 Q2 112.   142.  -42.2    0.154 \n 7 Snowy Mountains New South Wales Holiday ets    1998 Q3 310.   148.  131.     0.137 \n 8 Snowy Mountains New South Wales Holiday ets    1998 Q4  89.8  148.  -61.0    0.0335\n 9 Snowy Mountains New South Wales Holiday ets    1999 Q1 112.   147.  -27.7   -0.0687\n10 Snowy Mountains New South Wales Holiday ets    1999 Q2 103.   147.  -42.2   -0.0199\n# ℹ 74 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Example: Australian holiday tourism (4/9)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit |>\n  filter(Region == \"Snowy Mountains\") |>\n  components(fit) |>\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/ausholidays-components-plot-1.png){width=960}\n:::\n:::\n\n\n\n\n## Example: Australian holiday tourism (5/9)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit |> forecast()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A fable: 608 x 7 [1Q]\n# Key:     Region, State, Purpose, .model [76]\n   Region         State           Purpose .model Quarter\n   <chr>          <chr>           <chr>   <chr>    <qtr>\n 1 Adelaide       South Australia Holiday ets    2018 Q1\n 2 Adelaide       South Australia Holiday ets    2018 Q2\n 3 Adelaide       South Australia Holiday ets    2018 Q3\n 4 Adelaide       South Australia Holiday ets    2018 Q4\n 5 Adelaide       South Australia Holiday ets    2019 Q1\n 6 Adelaide       South Australia Holiday ets    2019 Q2\n 7 Adelaide       South Australia Holiday ets    2019 Q3\n 8 Adelaide       South Australia Holiday ets    2019 Q4\n 9 Adelaide Hills South Australia Holiday ets    2018 Q1\n10 Adelaide Hills South Australia Holiday ets    2018 Q2\n# ℹ 598 more rows\n# ℹ 2 more variables: Trips <dist>, .mean <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## Example: Australian holiday tourism (6/9)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit |> forecast() |>\n  filter(Region == \"Snowy Mountains\") |>\n  autoplot(holidays) +\n  labs(y = \"Thousands\", title = \"Overnight trips\")\n```\n\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/ausholidays-forecast-plot-1.png){width=960}\n:::\n:::\n\n\n\n\n## Residuals {.smaller}\n\n**Response residuals**\n$$\\hat{e}_t = y_t - \\hat{y}_{t|t-1}$$\n\n. . .\n\n**Innovation residuals**\nAdditive error model:\n$$\\hat\\varepsilon_t = y_t - \\hat{y}_{t|t-1}$$\n\nMultiplicative error model:\n$$\\hat\\varepsilon_t = \\frac{y_t - \\hat{y}_{t|t-1}}{\\hat{y}_{t|t-1}}$$\n\n## Example: Australian holiday tourism (7/9) {.smaller}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naus_holidays <- tourism |>\n  filter(Purpose == \"Holiday\") |>\n  summarise(Trips = sum(Trips))\nfit <- aus_holidays |>\n  model(ets = ETS(Trips)) |>\n  report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Trips \nModel: ETS(M,N,M) \n  Smoothing parameters:\n    alpha = 0.3578226 \n    gamma = 0.0009685565 \n\n  Initial states:\n     l[0]      s[0]     s[-1]    s[-2]    s[-3]\n 9666.501 0.9430367 0.9268433 0.968352 1.161768\n\n  sigma^2:  0.0022\n\n     AIC     AICc      BIC \n1331.372 1332.928 1348.046 \n```\n\n\n:::\n:::\n\n\n\n\n## Example: Australian holiday tourism (8/9)\n\n:::{.panel-tabset}\n\n### Code\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresiduals(fit)\nresiduals(fit, type = \"response\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_rows(\n  residuals(fit) |> mutate(Type = \"Innovation residuals\") |> as_tibble(),\n  residuals(fit, type = \"response\") |> \n    mutate(Type = \"Response residuals\") |> \n    as_tibble()) |>\n  ggplot(aes(x = Quarter, y = .resid)) +\n  geom_line() +\n  facet_grid(Type ~ ., scales = \"free_y\") +\n  labs(y = \"\")\n```\n:::\n\n\n\n\n### Plot\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n\n\n:::\n \n## Example: Australian holiday tourism (9/9) {.smaller}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit |>\n  augment()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 80 x 6 [1Q]\n# Key:       .model [1]\n   .model Quarter  Trips .fitted .resid   .innov\n   <chr>    <qtr>  <dbl>   <dbl>  <dbl>    <dbl>\n 1 ets    1998 Q1 11806.  11230.  576.   0.0513 \n 2 ets    1998 Q2  9276.   9532. -257.  -0.0269 \n 3 ets    1998 Q3  8642.   9036. -393.  -0.0435 \n 4 ets    1998 Q4  9300.   9050.  249.   0.0275 \n 5 ets    1999 Q1 11172.  11260.  -88.0 -0.00781\n 6 ets    1999 Q2  9608.   9358.  249.   0.0266 \n 7 ets    1999 Q3  8914.   9042. -129.  -0.0142 \n 8 ets    1999 Q4  9026.   9154. -129.  -0.0140 \n 9 ets    2000 Q1 11071.  11221. -150.  -0.0134 \n10 ets    2000 Q2  9196.   9308. -111.  -0.0120 \n# ℹ 70 more rows\n```\n\n\n:::\n:::\n\n\n\n\n. . .\n\n\n**Innovation residuals** (`.innov`) are given by $\\hat{\\varepsilon}_t$ while regular residuals (`.resid`) are $y_t - \\hat{y}_{t-1}$. They are different when the model has multiplicative errors.\n\n\n\n## Some unstable models {.smaller}\n\n* Some of the combinations of (Error, Trend, Seasonal) can lead to numerical difficulties; see equations with division by a state.\n* These are: ETS(A,N,M), ETS(A,A,M), ETS(A,$A_d$,M).\n* Models with multiplicative errors are useful for strictly positive data, but are not numerically stable with data containing zeros or negative values. In that case only the six fully additive models will be applied.\n\n## Exponential smoothing models {.smaller}\n\n\n**Additive Error**\n\n\n| **Trend**          | **N (None)** | **A (Additive)** | **M (Multiplicative)** |\n|-----------------------------|--------------|------------------|------------------------|\n| **N (None)**       | A,N,N        | A,N,A            | ~~A,N,M~~              |\n| **A (Additive)**   | A,A,N        | A,A,A            | ~~A,A,M~~              |\n| **$A_d$** (Additive damped)   | A,$A_d$,N | A,$A_d$,A     | ~~A,$A_d$,M~~       |\n\n**Multiplicative Error**\n\n| **Trend**          | **N (None)** | **A (Additive)** | **M (Multiplicative)** |\n|-----------------------------|--------------|------------------|------------------------|\n| **N (None)**       | M,N,N        | M,N,A            | M,N,M                  |\n| **A (Additive)**   | M,A,N        | M,A,A            | M,A,M                  |\n| **$A_d$** (Additive damped)   | M,$A_d$,N | M,$A_d$,A     | M,$A_d$,M           |\n\n# Forecasting with exponential smoothing\n\n## Forecasting with ETS models {.smaller}\n\n**Traditional point forecasts:** iterate the equations for $t=T+1,T+2,\\dots,T+h$ and set all $\\varepsilon_t=0$ for $t>T$.\n\n* Not the same as $\\text{E}(y_{t+h} | \\textbf{x}_t)$ unless seasonality is additive.\n* `fable` uses $\\text{E}(y_{t+h} | \\textbf{x}_t)$.\n* Point forecasts for ETS(A,\\*,\\*) are identical to ETS(M,\\*,\\*) if the parameters are the same.\n\n\n## Forecasting with ETS models {.smaller}\n\n**Prediction intervals:** can only be generated using the models.\n\n  * The prediction intervals will differ between models with additive and multiplicative errors.\n  * Exact formulae for some models.\n  * More general to simulate future sample paths, conditional on the last estimate of the states, and to obtain prediction intervals from the percentiles of these simulated future paths.\n\n## Prediction intervals {.smaller}\n\nPI for most ETS models: $\\hat{y}_{T+h|T} \\pm c \\sigma_h$, where $c$ depends on coverage probability and $\\sigma_h$ is forecast standard deviation.\n\nWe can see them in the book [HERE](https://otexts.com/fpp3/ets-forecasting.html). \n\n## Example: Corticosteroid drug sales (1/5)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nh02 <- PBS |>\n  filter(ATC2 == \"H02\") |>\n  summarise(Cost = sum(Cost))\nh02 |> autoplot(Cost)\n```\n\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/h02-plot-1.png){width=960}\n:::\n:::\n\n\n\n\n## Example: Corticosteroid drug sales (2/5)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nh02 |>\n  model(ETS(Cost)) |>\n  report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Cost \nModel: ETS(M,Ad,M) \n  Smoothing parameters:\n    alpha = 0.3071016 \n    beta  = 0.0001006793 \n    gamma = 0.0001007181 \n    phi   = 0.977528 \n\n  Initial states:\n     l[0]    b[0]      s[0]     s[-1]     s[-2]     s[-3]     s[-4]    s[-5]    s[-6]\n 417268.7 8205.82 0.8716807 0.8259747 0.7562808 0.7733338 0.6872373 1.283821 1.324616\n    s[-7]    s[-8]    s[-9]   s[-10]    s[-11]\n 1.180067 1.163601 1.104801 1.047963 0.9806235\n\n  sigma^2:  0.0046\n\n     AIC     AICc      BIC \n5515.212 5518.909 5574.938 \n```\n\n\n:::\n:::\n\n\n\n\n## Example: Corticosteroid drug sales (3/5)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nh02 |>\n  model(ETS(Cost ~ error(\"A\") + trend(\"A\") + season(\"A\"))) |>\n  report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Cost \nModel: ETS(A,A,A) \n  Smoothing parameters:\n    alpha = 0.1702163 \n    beta  = 0.006310854 \n    gamma = 0.4545987 \n\n  Initial states:\n     l[0]     b[0]      s[0]     s[-1]     s[-2]     s[-3]     s[-4]    s[-5]    s[-6]\n 409705.9 9097.111 -99075.37 -136602.3 -191496.1 -174530.8 -241436.7 210643.8 244644.2\n    s[-7]    s[-8]    s[-9]  s[-10]    s[-11]\n 145368.2 130569.6 84457.69 39131.7 -11673.71\n\n  sigma^2:  3498869384\n\n     AIC     AICc      BIC \n5585.278 5588.568 5641.686 \n```\n\n\n:::\n:::\n\n\n\n\n## Example: Corticosteroid drug sales (4/5)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nh02 |>\n  model(ETS(Cost)) |>\n  forecast() |>\n  autoplot(h02)\n```\n\n::: {.cell-output-display}\n![](8-ets_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n\n\n## Example: Corticosteroid drug sales (5/5)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nh02 |>\n  model(\n    auto = ETS(Cost),\n    AAA = ETS(Cost ~ error(\"A\") + trend(\"A\") + season(\"A\"))\n  ) |>\n  accuracy()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Model |      MAE|     RMSE|     MAPE|      MASE|     RMSSE|\n|:-----|--------:|--------:|--------:|---------:|---------:|\n|auto  | 38649.04| 51102.24| 4.988983| 0.6375806| 0.6891173|\n|AAA   | 43378.40| 56784.23| 6.047574| 0.7155993| 0.7657394|\n\n\n:::\n:::\n\n\n\n\n\n## Your turn\n\n* Use `ETS()` on some of these series:\n\n> `tourism`, `gafa_stock`, `pelt`\n\n* Does it always give good forecasts?\n\n* Find an example where it does not work well. Can you figure out why?\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}